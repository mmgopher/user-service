// Code generated by mockery v1.0.0. DO NOT EDIT.

package dao

import mock "github.com/stretchr/testify/mock"
import model "github.com/mmgopher/user-service/app/model"

// MockUserRepositoryProvider is an autogenerated mock type for the UserRepositoryProvider type
type MockUserRepositoryProvider struct {
	mock.Mock
}

// CheckIfExistWithNameAndSurname provides a mock function with given fields: name, surname
func (_m *MockUserRepositoryProvider) CheckIfExistWithNameAndSurname(name string, surname string) (bool, error) {
	ret := _m.Called(name, surname)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(name, surname)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, surname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: user
func (_m *MockUserRepositoryProvider) Create(user *model.User) (int, error) {
	ret := _m.Called(user)

	var r0 int
	if rf, ok := ret.Get(0).(func(*model.User) int); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: userID
func (_m *MockUserRepositoryProvider) Delete(userID int) (bool, error) {
	ret := _m.Called(userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUsers provides a mock function with given fields: sb
func (_m *MockUserRepositoryProvider) FindUsers(sb *UserSearchBuilder) ([]model.User, int, int, error) {
	ret := _m.Called(sb)

	var r0 []model.User
	if rf, ok := ret.Get(0).(func(*UserSearchBuilder) []model.User); ok {
		r0 = rf(sb)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*UserSearchBuilder) int); ok {
		r1 = rf(sb)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(*UserSearchBuilder) int); ok {
		r2 = rf(sb)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*UserSearchBuilder) error); ok {
		r3 = rf(sb)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetByID provides a mock function with given fields: id
func (_m *MockUserRepositoryProvider) GetByID(id int) (*model.User, error) {
	ret := _m.Called(id)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(int) *model.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByNameAndSurname provides a mock function with given fields: name, surname
func (_m *MockUserRepositoryProvider) GetByNameAndSurname(name string, surname string) (*model.User, error) {
	ret := _m.Called(name, surname)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string, string) *model.User); ok {
		r0 = rf(name, surname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, surname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: user
func (_m *MockUserRepositoryProvider) Update(user *model.User) (bool, error) {
	ret := _m.Called(user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.User) bool); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
